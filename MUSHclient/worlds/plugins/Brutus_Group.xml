<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on støeda, listopad 06, 2013, 6:33 odp. -->
<!-- MuClient version 4.84 -->

<!-- Plugin "Brutus_Group" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Brutus_Group"
   author="Gumidek"
   id="d573c788529f8bc8ec77e72f"
   language="Lua"
   purpose="Show group list in window"
   date_written="2013-11-06 18:28:53"
   requires="4.0"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Show group list in window
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

<!-- trigger to match start of group -->

  <trigger
   enabled="y"
   match="Your group * consists of:"
   send_to="12"
   sequence="100"
	 keep_evaluating="n"
	 omit_from_output="y"
  >
  <send>
lines = {}
max_width = 1
group_name = "%0"
EnableTrigger ("group_line", true)
EnableTrigger ("group_stopper", true)
</send>
  </trigger>

<!-- trigger to match an group line -->

  <trigger
   enabled="n"
   match=" *"
   name="group_line"
   script="PutLine"
   sequence="40"
	 keep_evaluating="n"
	 omit_from_output="y"
  >
  </trigger>

<!-- trigger to match end of group -->

  <trigger
   enabled="n"
   match="*"
   name="group_stopper"
   script="ShowGroup"
   sequence="100"
	 keep_evaluating="n"
  >
  </trigger>

</triggers>

<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="ghelp"
   enabled="y"
  >
  </alias>

  <alias
   script="OnPluginClose"
   match="gclose"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
win = GetPluginID () .. "group"
font = "f"
max_width = 1
win_left = 20
win_top = 20

function PutLine(name, line, wildcards, styles)
	table.insert(lines, styles)
	max_width = math.max (max_width, WindowTextWidth (win, font, line))
end -- end PutLine

function ShowGroup ()
	-- don't need to track inventories any more
	EnableTrigger ("group_line", false)
	EnableTrigger ("group_stopper", false)

	if not WindowInfo (win , 1) then
	  WindowCreate (win, win_left, win_top, 0, 0, 4, 0, 0)
	  WindowFont (win, font, "Fixedsys", 10)
 	end -- if

	font_height = WindowFontInfo (win, font, 1)

	window_width = max_width + 10
	window_height = font_height * (#lines + 2) + 10

	WindowCreate (win, win_left, win_top, window_width, window_height, 4, 0, ColourNameToRGB "#000000")
  WindowPosition(win, win_left, win_top, 0, 2);

	WindowRectOp (win, 5, 0, 0, 0, 0, 5, 15 + 0x1000)

	if not WindowHotspotInfo (win , "hs1", 3) then
		WindowAddHotspot (win, "hs1", 0, 0, 60, 20,   -- rectangle
	               "",   -- MouseOver
	               "",   -- CancelMouseOver
	               "mousedown",
	               "cancelmousedown",
	               "mouseup",
	               "Drag me!",  -- tooltip text
	               1, 0)  -- hand cursor
		WindowDragHandler(win, "hs1", "dragmove", "dragrelease", 0)
	end

	WindowText (win, font, group_name, 5, 0, 0, 0, ColourNameToRGB "#AAAAAA")

	WindowMoveHotspot(win, "hs1", 0, 0, window_width, window_height)

	y = 5
	for i, styles in ipairs (lines) do
	  x = 5
	  y = y + font_height
	  for _, style in ipairs (styles) do
	    x = x + WindowText (win, font, style.text, x, y, 0, 0, style.textcolour)
	  end -- end for
	end -- end for

	WindowShow (win, true)
end

function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

function OnPluginClose ()
	lines = {}
	WindowDelete(win)
end -- OnPluginClose


function mousedown(flags, hotspot_id)
  startx, starty = WindowInfo (win, 14), WindowInfo (win, 15)
end -- mousedown

function cancelmousedown(flags, hotspot_id)
  -- print ("we cancelled moused down for hotspot " .. hotspot_id)
end -- cancelmousedown

function mouseup(flags, hotspot_id)
  -- print ("we moused up on hotspot " .. hotspot_id)
end -- mouseup

function dragmove(flags, hotspot_id)
  local posx, posy = WindowInfo (win, 17),
                     WindowInfo (win, 18)

  -- print ("moved to position", posx, posy)


  -- move the window to the new location
	win_left = posx - startx
	win_top = posy - starty
  WindowPosition(win, posx - startx, posy - starty, 0, 2);

  -- change the mouse cursor shape appropriately
  if posx < 0 or posx > GetInfo (281) or
     posy < 0 or posy > GetInfo (280) then
    check (SetCursor ( 11))   -- X cursor
  else
    check (SetCursor ( 1))   -- hand cursor
  end -- if

end -- dragmove

function dragrelease(flags, hotspot_id)
  -- print ("mouse drag release for " .. hotspot_id)
  -- print ("released at position", WindowInfo (win, 17), WindowInfo (win, 18))
end -- dragrelease

]]>
</script> 

</muclient>
